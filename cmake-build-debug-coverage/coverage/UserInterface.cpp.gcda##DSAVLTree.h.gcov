        -:    0:Source:/mnt/c/CLionProjects/21s-srch-eng-csphalopods/DSAVLTree.h
        -:    0:Graph:/mnt/c/CLionProjects/21s-srch-eng-csphalopods/cmake-build-debug-coverage/CMakeFiles/search_engine.dir/UserInterface.cpp.gcno
        -:    0:Data:/mnt/c/CLionProjects/21s-srch-eng-csphalopods/cmake-build-debug-coverage/CMakeFiles/search_engine.dir/UserInterface.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by robot on 4/10/2021.
        -:    3://
        -:    4:
        -:    5:#ifndef DSAVLMAP_DSAVLTREE_H
        -:    6:#define DSAVLMAP_DSAVLTREE_H
        -:    7:
        -:    8:#include "DSTreeNode.h"
        -:    9:
        -:   10:using namespace std;
        -:   11:
        -:   12:template<class K, class V, class R>
        -:   13:class DSAVLTree {
        -:   14:private:
        -:   15:    DSTreeNode<K,V,R> *root = nullptr;
        -:   16:    int size;
        -:   17:public:
        -:   18:    DSAVLTree(): root(nullptr), size(0){}
function _ZN9DSAVLTreeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_iEC2ERKS6_ called 3 returned 100% blocks executed 100%
        3:   19:    DSAVLTree(const DSAVLTree<K,V,R>& rhs){*this = rhs; size = 0;}
        -:   20:    ~DSAVLTree();
        -:   21:    //accessors
        -:   22:    DSTreeNode<K,V,R>* find(K key);
function _ZN9DSAVLTreeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_iE7getRootEv called 0 returned 0% blocks executed 0%
    #####:   23:    inline DSTreeNode<K,V,R>* getRoot(){return root;}
    %%%%%:   23-block  0
        -:   24:    inline bool contains(K val){return contains(root, val);}
        -:   25:    bool contains(DSTreeNode<K,V,R>* c, K val);
        -:   26:    DSTreeNode<K,V,R>* find(DSTreeNode<K,V,R>* c, K val);
        -:   27:    int height(DSTreeNode<K,V,R>*&);
        -:   28:    int getSize();
        -:   29:
        -:   30:    //mutators
        -:   31:    inline void insert(const K& key, const V& val, const R& rank){insert(key, val, rank, root); size++;}
        -:   32:    void insert(const K& key, const V& val, const R& rank, DSTreeNode<K,V, R>*& t);
        -:   33:    void balance(DSTreeNode<K,V,R>*& t);
        -:   34:    void rotateWithLeftChild(DSTreeNode<K,V,R>*& k2);
        -:   35:    void doubleWithLeftChild(DSTreeNode<K,V,R>*& k3);
        -:   36:    void rotateWithRightChild(DSTreeNode<K,V,R>*& k2);
        -:   37:    void doubleWithRightChild(DSTreeNode<K,V,R>*& k3);
        -:   38:    inline void clear(){clear(root);}
        -:   39:    void clear(DSTreeNode<K,V,R>* n);
        -:   40:
        -:   41:};
        -:   42:
        -:   43:#endif //DSAVLMAP_DSAVLTREE_H
        -:   44:
        -:   45:template<class K, class V, class R>
function _ZN9DSAVLTreeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_iED2Ev called 0 returned 0% blocks executed 0%
    #####:   46:DSAVLTree<K, V, R>::~DSAVLTree() {
        -:   47:    //empty tree using post order traversal
    #####:   48:    clear(root);
    %%%%%:   48-block  0
call    0 never executed
    #####:   49:}//destructor
        -:   50:
        -:   51:template<class K, class V, class R>
        -:   52:void DSAVLTree<K, V, R>::insert(const K& key, const V& val, const R& rank, DSTreeNode<K,V, R>*& t) {
        -:   53://TODO check with panopto
        -:   54:    if(t==nullptr) {
        -:   55:        t = new DSTreeNode<K, V, R>(key, val, rank, nullptr, nullptr);
        -:   56:        if(root == nullptr)
        -:   57:            root = t;
        -:   58:        else
        -:   59:            balance(t);
        -:   60:    }
        -:   61:    else if(t->getKey() < key) {
        -:   62:        insert(key, val, rank, t->getRight());
        -:   63:        balance(t);
        -:   64:    }
        -:   65:    else if(key < t->getKey()) {
        -:   66:        insert(key, val, rank, t->getLeft());
        -:   67:        balance(t);
        -:   68:    }
        -:   69:    else //if(key == t->getKey())//
        -:   70:        t->addValue(val,rank);//add this doc id and add to its rank for this word
        -:   71:
        -:   72:}//insert
        -:   73:
        -:   74:template<class K, class V, class R>
        -:   75:void DSAVLTree<K, V, R>::balance(DSTreeNode<K, V, R>*& t) {
        -:   76://TODO check with panopto
        -:   77:    //if(t->getLeft() != nullptr && t->getRight() != nullptr) {
        -:   78:        if(height(t->getLeft()) - height(t->getRight()) > 1) {//Case 1 or 2
        -:   79:            if (height(t->getLeft()->getLeft()) >= height(t->getLeft()->getRight()))//Case 1
        -:   80:                rotateWithLeftChild(t);
        -:   81:            else//Case 2
        -:   82:                doubleWithLeftChild(t);
        -:   83:        }
        -:   84:        else if (height(t->getRight()) - height(t->getLeft()) > 1) {//Case 3 or 4
        -:   85:            if (height(t->getRight()->getLeft()) >= height(t->getRight()->getRight()))
        -:   86:                doubleWithRightChild(t);//Case 3?
        -:   87:            else//Case 4?
        -:   88:                rotateWithRightChild(t);
        -:   89:        }
        -:   90:        //t->getHeight() = max(height(t->getLeft()), height(t->getRight())) + 1;
        -:   91:        t->setHeight(max(height(t->getLeft()), height(t->getRight())) + 1);
        -:   92://    }
        -:   93:  //  else
        -:   94:    //    t->setHeight(1);
        -:   95:}//balance(DSTreeNode<K, V> *&t)
        -:   96:
        -:   97:template<class K, class V, class R>
        -:   98:void DSAVLTree<K, V, R>::rotateWithLeftChild(DSTreeNode<K, V, R>*& k2) {
        -:   99://TODO check with panopto
        -:  100:    DSTreeNode<K,V, R>* k1 = k2->getLeft();
        -:  101:    k2->setLeft((k1->getRight()));
        -:  102:    k1->setRight(k2);
        -:  103:    k2->setHeight(max(height(k2->getLeft()), height(k2->getRight())) + 1);
        -:  104:    k1->setHeight(max(height(k1->getLeft()), k2->getHeight()) + 1);
        -:  105:    //k2->setHeight(max(k2->getLeft()->getHeight(),(k2->getRight()->getHeight()+1)));
        -:  106:    //k1->setHeight(max(k1->getLeft()->getHeight(), (k2->getHeight()+1)));
        -:  107:    k2 = k1;
        -:  108:}//rotateWithLeftChild
        -:  109:
        -:  110:template<class K, class V, class R>
        -:  111:void DSAVLTree<K, V, R>::doubleWithLeftChild(DSTreeNode<K, V, R>*& k3) {
        -:  112://TODO check with panopto
        -:  113:    rotateWithRightChild(k3->getLeft());
        -:  114:    rotateWithLeftChild(k3);
        -:  115:}//doubleWithLeftChild
        -:  116:
        -:  117:template<class K, class V, class R>
        -:  118:void DSAVLTree<K, V, R>::rotateWithRightChild(DSTreeNode<K, V, R>*& k2) {
        -:  119://TODO check (not on panopto)
        -:  120:    DSTreeNode<K,V, R>* k1 = k2->getRight();
        -:  121:    k2->setRight((k1->getLeft()));
        -:  122:    k1->setLeft(k2);
        -:  123:    k2->setHeight(max(height(k2->getRight()), height(k2->getLeft())) + 1);
        -:  124:    k1->setHeight(max(height(k1->getRight()), k2->getHeight()) + 1);
        -:  125:    k2 = k1;
        -:  126:}//rotateWithRightChild
        -:  127:
        -:  128:template<class K, class V, class R>
        -:  129:void DSAVLTree<K, V, R>::doubleWithRightChild(DSTreeNode<K, V, R>*& k3) {
        -:  130://TODO check (not on panopto)
        -:  131:    rotateWithLeftChild(k3->getRight());
        -:  132:    rotateWithRightChild(k3);
        -:  133:}//doubleWithRightChild
        -:  134:
        -:  135:template<class K, class V, class R>
        -:  136:bool DSAVLTree<K, V, R>::contains(DSTreeNode<K, V, R> *c, K val) {
        -:  137:    if(c == nullptr)
        -:  138:        return false;
        -:  139:    else if(c->getKey() == val)
        -:  140:        return true;
        -:  141:    else if(val < c->getKey())
        -:  142:        contains(c->getLeft(), val);
        -:  143:    else if(c->getKey() < val)
        -:  144:        contains(c->getRight(), val);
        -:  145:}//contains
        -:  146:
        -:  147:template<class K, class V, class R>
        -:  148:DSTreeNode<K, V, R>* DSAVLTree<K, V, R>::find(K key) {
        -:  149:    return find(root,key);
        -:  150:}
        -:  151:
        -:  152://find
        -:  153:template<class K, class V, class R>
        -:  154:DSTreeNode<K,V, R>* DSAVLTree<K, V, R>::find(DSTreeNode<K, V, R> *c, K val) {
        -:  155:    if(c == nullptr)
        -:  156:        return nullptr;
        -:  157:    else if(c->getKey() == val)
        -:  158:        return c;
        -:  159:    else if(val < c->getKey())
        -:  160:        return find(c->getLeft(), val);
        -:  161:    else //if(c->getKey() < val)
        -:  162:        return find(c->getRight(), val);
        -:  163:}
        -:  164:
        -:  165:template<class K, class V, class R>
function _ZN9DSAVLTreeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_iE5clearEP10DSTreeNodeIS5_S5_iE called 0 returned 0% blocks executed 0%
    #####:  166:void DSAVLTree<K, V, R>::clear(DSTreeNode<K,V,R>* n) {
    #####:  167:    if(n != nullptr){
    %%%%%:  167-block  0
branch  0 never executed
branch  1 never executed
    #####:  168:        clear(n->getLeft());
    %%%%%:  168-block  0
call    0 never executed
call    1 never executed
    #####:  169:        clear(n->getRight());
call    0 never executed
call    1 never executed
    #####:  170:        delete n;
branch  0 never executed
branch  1 never executed
    %%%%%:  170-block  0
call    2 never executed
call    3 never executed
        -:  171:    }
    #####:  172:    size = 0;
    #####:  173:}
        -:  174:
        -:  175://TODO: review height function
        -:  176:template<class K, class V, class R>
        -:  177:int DSAVLTree<K, V, R>::height(DSTreeNode<K, V, R>*& node){
        -:  178:    if(node == nullptr)
        -:  179:        return -1;
        -:  180:    return node->getHeight();
        -:  181:}
        -:  182:
        -:  183://destructor
        -:  184:template<class K, class V, class R>
function _ZN9DSAVLTreeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_iE7getSizeEv called 0 returned 0% blocks executed 0%
    #####:  185:int DSAVLTree<K, V, R>::getSize(){
    #####:  186:    return size;
    %%%%%:  186-block  0
        -:  187:}
        -:  188:
        -:  189:
